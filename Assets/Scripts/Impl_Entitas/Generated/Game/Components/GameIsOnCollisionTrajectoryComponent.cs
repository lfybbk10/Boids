//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public IsOnCollisionTrajectoryComponent isOnCollisionTrajectory { get { return (IsOnCollisionTrajectoryComponent)GetComponent(GameComponentsLookup.IsOnCollisionTrajectory); } }
    public bool hasIsOnCollisionTrajectory { get { return HasComponent(GameComponentsLookup.IsOnCollisionTrajectory); } }

    public void AddIsOnCollisionTrajectory(bool newValue) {
        var index = GameComponentsLookup.IsOnCollisionTrajectory;
        var component = (IsOnCollisionTrajectoryComponent)CreateComponent(index, typeof(IsOnCollisionTrajectoryComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceIsOnCollisionTrajectory(bool newValue) {
        var index = GameComponentsLookup.IsOnCollisionTrajectory;
        var component = (IsOnCollisionTrajectoryComponent)CreateComponent(index, typeof(IsOnCollisionTrajectoryComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveIsOnCollisionTrajectory() {
        RemoveComponent(GameComponentsLookup.IsOnCollisionTrajectory);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherIsOnCollisionTrajectory;

    public static Entitas.IMatcher<GameEntity> IsOnCollisionTrajectory {
        get {
            if (_matcherIsOnCollisionTrajectory == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.IsOnCollisionTrajectory);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherIsOnCollisionTrajectory = matcher;
            }

            return _matcherIsOnCollisionTrajectory;
        }
    }
}
